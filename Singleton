// singleton.h
#ifndef SINGLETON_H
#define SINGLETON_H

// 单例 - 懒汉式/饿汉式公用
class Singleton
{
public:
    static Singleton* GetInstance();

private:
    Singleton() {
        cout<<"Singleton"<<(m_pSingleton==nullptr? 1:0)<<endl;
    }  // 构造函数（被保护）

private:
    static Singleton *m_pSingleton;  // 指向单例对象的指针
};

#endif // SINGLETON_H

// singleton.cpp
Singleton *Singleton::m_pSingleton = new Singleton();
//Singleton *sss= new Singleton();
// 单例 - 饿汉式
Singleton *Singleton::GetInstance()
{
    cout<<"GetInstance ok";
    return m_pSingleton;
}


int main(){
    Singleton* s=nullptr;
    s = Singleton::GetInstance();
    cout<<(s==nullptr? 1:0)<<endl;
    s->GetInstance();
    return 0;
}
